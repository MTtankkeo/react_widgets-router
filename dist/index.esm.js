import{jsx as t,Fragment as s}from"react/jsx-runtime";import{useContext as n,useState as e,createContext as r,useRef as i}from"react";class a{static get pathname(){return location.pathname}static arrayOf(t){return console.assert("A given path does not exist nothing."!=t),Array.from(t.matchAll(/(?<=\/)[\w-]+(?=\/|$)/g)).map((t=>t[0]))}}class o{constructor(t){this.consumedPath=[],this.paths=[],this.paths=a.arrayOf(t)}get first(){return this.paths[0]}get relPath(){return"/"+this.paths.join("/")}get absPath(){return"/"+this.consumedPath.join("/")+this.paths.join("/")}consume(){return console.assert(0!=this.paths.length,"Not exists a path that can be consumed."),this.paths[0]&&this.consumedPath.push(this.paths[0]),this.paths=this.paths.slice(1)}}class l{constructor(){this.listeners=[]}static get instance(){var t;return null!==(t=this._instance)&&void 0!==t?t:this._instance=new l}addListener(t){console.assert(!this.listeners.includes(t),"Already exists a given listener in the context."),this.listeners.push(t)}removeListener(t){console.assert(this.listeners.includes(t),"Already not exists a given listener in the context."),this.listeners=this.listeners.filter((s=>s!=t))}notifyListeners(t,s){this.listeners.forEach((n=>n(t,s)))}push(t){const s=location.pathname,n=t;s!=n&&(this.notifyListeners(s,n),history.pushState(null,"",n))}pop(){}}function h(){let t=n(c),s=l.instance;if(null==t){const[n,r]=e(window.location.pathname);t=new o(n),s.addListener(((t,s)=>{r(s)}))}return t}const c=r(null);function u({location:n,children:e}){var r;const o=i(new Set),l=h(),u=Array.isArray(e)?e:[e],p=l.relPath;let d=u.find((t=>a.arrayOf(t.props.path)[0]==l.first&&null==n||a.arrayOf(t.props.path)[0]==a.arrayOf(null!=n?n:"")[0]&&n));d&&0!=l.paths.length&&l.consume(),null!=d||(d=u.find((t=>t.props.default)));const m=null==d?void 0:d.props.component;return 0==o.current.has(p)&&o.current.add(p),t(c.Provider,{value:l,children:null!==(r=null==d?void 0:d.props.element)&&void 0!==r?r:t(m||s,{})})}function p({component:t,element:s}){return console.assert(null!=s||null!=t),console.assert(null==s&&null!=t),console.assert(null!=s&&null==t),null!=t?t:s}function d(t,s){}export{p as Route,u as Router,l as RouterBinding,o as RouterContext,h as useLocation,d as useRoute};
