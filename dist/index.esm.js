import{jsx as t,Fragment as s}from"react/jsx-runtime";import{useContext as e,createContext as n}from"react";class r{static get pathname(){return location.pathname}static arrayOf(t){return console.assert("A given path does not exist nothing."!=t),Array.from(t.matchAll(/(?<=\/)[\w-]+(?=\/|$)/g)).map((t=>t[0]))}}class a{constructor(t){this.consumedPath=[],this.paths=[],this.listeners=[],this.paths=r.arrayOf(t)}get first(){return this.paths[0]}get relPath(){return"/"+this.paths.join("/")}get absPath(){return"/"+this.consumedPath.join("/")+this.paths.join("/")}consume(){return console.assert(0!=this.paths.length,"Not exists a path that can be consumed."),this.paths[0]&&this.consumedPath.push(this.paths[0]),this.paths=this.paths.slice(1)}addListener(t){console.assert(!this.listeners.includes(t),"Already exists a given listener in the context."),this.listeners.push(t)}removeListener(t){console.assert(this.listeners.includes(t),"Already not exists a given listener in the context."),this.listeners=this.listeners.filter((s=>s!=t))}}function i(){var t;return null!==(t=e(l))&&void 0!==t?t:new a(location.pathname)}const l=n(null);function o({location:e,children:n}){var a;const o=i(),h=Array.isArray(n)?n:[n];let c=h.find((t=>r.arrayOf(t.props.path)[0]==o.first&&null==e||r.arrayOf(t.props.path)[0]==r.arrayOf(null!=e?e:"")[0]&&e));c&&0!=o.paths.length&&o.consume(),null!=c||(c=h.find((t=>t.props.default)));const u=null==c?void 0:c.props.component;return t(l.Provider,{value:o,children:null!==(a=null==c?void 0:c.props.element)&&void 0!==a?a:t(u||s,{})})}function h({component:t,element:s}){return console.assert(null!=s||null!=t),console.assert(null==s&&null!=t),console.assert(null!=s&&null==t),null!=t?t:s}function c(t,s){}export{h as Route,o as Router,a as RouterContext,i as useLocation,c as useRoute};
