import{jsx as t,Fragment as e}from"react/jsx-runtime";import{createContext as s,useContext as n}from"react";class r{static get pathname(){return location.pathname}static arrayOf(t){return console.assert("A given path does not exist nothing."!=t),Array.from(t.matchAll(/(?<=\/)[\w-]+(?=\/|$)/g)).map((t=>t[0]))}}class l{constructor(t){this.paths=[],this.listeners=[],this.paths=r.arrayOf(t)}get first(){return this.paths[0]}consume(){return console.assert(0!=this.paths.length,"Not exists a path that can be consumed."),this.paths=this.paths.slice(1)}addListener(t){console.assert(!this.listeners.includes(t),"Already exists a given listener in the context."),this.listeners.push(t)}removeListener(t){console.assert(this.listeners.includes(t),"Already not exists a given listener in the context."),this.listeners=this.listeners.filter((e=>e!=t))}}const i=s(null);function o({location:s=r.pathname,children:o}){var a,c;const h=null!==(a=n(i))&&void 0!==a?a:new l(s),u=Array.isArray(o)?o:[o];let p=u.find((t=>r.arrayOf(t.props.path)[0]==h.first));p&&0!=h.paths.length&&h.consume(),null!=p||(p=u.find((t=>t.props.default)));const m=null==p?void 0:p.props.component;return t(i.Provider,{value:h,children:null!==(c=null==p?void 0:p.props.element)&&void 0!==c?c:t(m||e,{})})}function a({component:t,element:e}){return console.assert(null!=e||null!=t),console.assert(null==e&&null!=t),console.assert(null!=e&&null==t),null!=t?t:e}function c(){}function h(t,e=!1){}export{a as Route,o as Router,l as RouterContext,c as useLocation,h as useRoute};
